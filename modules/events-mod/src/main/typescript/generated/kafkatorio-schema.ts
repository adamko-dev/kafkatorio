// Generated by kxs-ts-gen - do not edit this file manually

export interface KafkatorioPacket {
  modVersion: string;
  tick: Tick;
  data: KafkatorioPacketData;
}

export type Tick = UInt;

export type KafkatorioPacketData =
  | KafkatorioPacketData.ConfigurationUpdate
  | KafkatorioPacketData.ConsoleChatUpdate
  | KafkatorioPacketData.ConsoleCommandUpdate
  | KafkatorioPacketData.EntityUpdate
  | KafkatorioPacketData.Error
  | KafkatorioPacketData.MapChunkEntityUpdate
  | KafkatorioPacketData.MapChunkTileUpdate
  | KafkatorioPacketData.PlayerUpdate
  | KafkatorioPacketData.PrototypesUpdate
  | KafkatorioPacketData.SurfaceUpdate;

export namespace KafkatorioPacketData {
  export enum Type {
    ConfigurationUpdate = "kafkatorio.packet.instant.ConfigurationUpdate",
    ConsoleChatUpdate = "kafkatorio.packet.instant.ConsoleChatUpdate",
    ConsoleCommandUpdate = "kafkatorio.packet.instant.ConsoleCommandUpdate",
    PrototypesUpdate = "kafkatorio.packet.instant.PrototypesUpdate",
    SurfaceUpdate = "kafkatorio.packet.instant.SurfaceUpdate",
    EntityUpdate = "kafkatorio.packet.keyed.EntityUpdate",
    MapChunkEntityUpdate = "kafkatorio.packet.keyed.MapChunkEntityUpdate",
    MapChunkTileUpdate = "kafkatorio.packet.keyed.MapChunkTileUpdate",
    PlayerUpdate = "kafkatorio.packet.keyed.PlayerUpdate",
    Error = "kafkatorio.packet.KafkatorioPacketData.Error",
  }
  
  export interface ConfigurationUpdate {
    type: KafkatorioPacketData.Type.ConfigurationUpdate;
    factorioData: ConfigurationUpdateGameData;
    allMods: ConfigurationUpdateModData[];
    modStartupSettingsChange: boolean;
    migrationApplied: boolean;
  }
  
  export interface ConsoleChatUpdate {
    type: KafkatorioPacketData.Type.ConsoleChatUpdate;
    authorPlayerIndex: PlayerIndex | null;
    content: string;
  }
  
  export interface ConsoleCommandUpdate {
    type: KafkatorioPacketData.Type.ConsoleCommandUpdate;
    authorPlayerIndex: PlayerIndex | null;
    command: string;
    parameters: string;
  }
  
  export interface PrototypesUpdate {
    type: KafkatorioPacketData.Type.PrototypesUpdate;
    prototypes: FactorioPrototype[];
  }
  
  export interface SurfaceUpdate {
    type: KafkatorioPacketData.Type.SurfaceUpdate;
    index: SurfaceIndex;
    daytime: Double;
    name: string;
  }
  
  export interface EntityUpdate {
    type: KafkatorioPacketData.Type.EntityUpdate;
    key: EntityUpdateKey;
    events?: { [key: EventName]: Tick[] } | null;
    chunkPosition?: MapEntityPosition | null;
    graphicsVariation?: UByte | null;
    health?: Float | null;
    isActive?: boolean | null;
    isRotatable?: boolean | null;
    lastUser?: UInt | null;
    localisedDescription?: string | null;
    localisedName?: string | null;
  }
  
  export interface MapChunkEntityUpdate {
    type: KafkatorioPacketData.Type.MapChunkEntityUpdate;
    key: MapChunkEntityUpdateKey;
    events?: { [key: EventName]: Tick[] } | null;
    distinctEntities?: { [key: string]: FactorioEntityData } | null;
  }
  
  export interface MapChunkTileUpdate {
    type: KafkatorioPacketData.Type.MapChunkTileUpdate;
    key: MapChunkTileUpdateKey;
    events?: { [key: EventName]: Tick[] } | null;
    player?: PlayerIndex | null;
    robot?: EntityIdentifiersData | null;
    force?: ForceIndex | null;
    tileDictionary?: MapTileDictionary | null;
    isDeleted?: boolean | null;
  }
  
  export interface PlayerUpdate {
    type: KafkatorioPacketData.Type.PlayerUpdate;
    key: PlayerUpdateKey;
    events?: { [key: EventName]: Tick[] } | null;
    characterUnitNumber?: UnitNumber | null;
    chatColour?: Colour | null;
    colour?: Colour | null;
    name?: string | null;
    afkTime?: Tick | null;
    ticksToRespawn?: Tick | null;
    forceIndex?: ForceIndex | null;
    isAdmin?: boolean | null;
    isConnected?: boolean | null;
    isShowOnMap?: boolean | null;
    isSpectator?: boolean | null;
    lastOnline?: Tick | null;
    onlineTime?: Tick | null;
    position?: MapEntityPosition | null;
    surfaceIndex?: SurfaceIndex | null;
    tag?: string | null;
    diedCause?: EntityIdentifiersData | null;
    bannedReason?: string | null;
    kickedReason?: string | null;
    disconnectReason?: string | null;
    isRemoved?: boolean | null;
  }
  
  export interface Error {
    type: KafkatorioPacketData.Type.Error;
    message?: string | null;
    rawValue?: string | null;
  }
}

export type UInt = uint;

export interface ConfigurationUpdateGameData {
  oldVersion?: string | null;
  newVersion?: string | null;
}

export type Double = double;

export interface EntityUpdateKey {
  unitNumber: UnitNumber;
  protoId: PrototypeId;
}

export type MapEntityPosition = [
  x: Double,
  y: Double,
];

export type UByte = uint8;

export type Float = float;

export interface MapChunkEntityUpdateKey {
  protoId: PrototypeId;
  surfaceIndex: SurfaceIndex;
  chunkPosition: MapChunkPosition;
}

export interface MapChunkTileUpdateKey {
  chunkPosition: MapChunkPosition;
  surfaceIndex: SurfaceIndex;
}

export interface EntityIdentifiersData {
  unitNumber?: UnitNumber | null;
  protoId: PrototypeId;
}

export type ForceIndex = UInt & { __ForceIndex__: void };

export interface MapTileDictionary {
  tilesXY: { [key: string]: { [key: string]: PrototypeKey } };
  protos: { [key: PrototypeId]: PrototypeKey };
}

export interface PlayerUpdateKey {
  index: PlayerIndex;
}

export type Colour = [
  red: Float,
  green: Float,
  blue: Float,
  alpha: Float,
];

export type Int = int;

export interface ConfigurationUpdateModData {
  modName: string;
  currentVersion?: string | null;
  previousVersion?: string | null;
}

export type FactorioPrototype =
  | FactorioPrototype.Entity
  | FactorioPrototype.MapTile;

export namespace FactorioPrototype {
  export enum Type {
    Entity = "kafkatorio.prototype.Entity",
    MapTile = "kafkatorio.prototype.MapTile",
  }
  
  export interface Entity {
    type: FactorioPrototype.Type.Entity;
    protoId: PrototypeId;
    group: EntityItemGroup;
    subgroup: EntityItemGroup;
    colour?: Colour | null;
    mapColour?: Colour | null;
    mapColourFriend?: Colour | null;
    mapColourEnemy?: Colour | null;
    maxHealth: Float;
    isBuilding: boolean;
    isEntityWithOwner: boolean;
    isMilitaryTarget: boolean;
    miningProperties?: EntityMiningProperties | null;
  }
  
  export interface MapTile {
    type: FactorioPrototype.Type.MapTile;
    protoId: PrototypeId;
    mapColour: Colour;
    layer: UInt;
    collisionMasks: List;
    order: string;
    canBeMined: boolean;
  }
}

export type PrototypeId = string & { __PrototypeId__: void };

export type EventName = string & { __EventName__: void };

export type Byte = int8;

export type MapChunkPosition = [
  x: Int,
  y: Int,
];

export type FactorioEntityData =
  | FactorioEntityData.Resource
  | FactorioEntityData.Standard;

export namespace FactorioEntityData {
  export enum Type {
    Resource = "kafkatorio.entity.FactorioEntityData.Resource",
    Standard = "kafkatorio.entity.FactorioEntityData.Standard",
  }
  
  export interface Resource {
    type: FactorioEntityData.Type.Resource;
    protoId: PrototypeId;
    status?: EntityStatus | null;
    position: MapEntityPosition;
    amount: UInt;
    initialAmount?: UInt | null;
  }
  
  export interface Standard {
    type: FactorioEntityData.Type.Standard;
    protoId: PrototypeId;
    status?: EntityStatus | null;
    position: MapEntityPosition;
    graphicsVariation?: UByte | null;
    health?: Float | null;
    isActive?: boolean | null;
    isRotatable?: boolean | null;
    lastUser?: UInt | null;
    localisedDescription?: string | null;
    localisedName?: string | null;
  }
}

export interface EntityItemGroup {
  name: string;
  type: string;
  parentName?: string | null;
}

export interface EntityMiningProperties {
  canBeMined: boolean;
  products: MinedProduct[] | null;
}

export type List = any & { __List__: void };

export enum EntityStatus {
  CANT_DIVIDE_SEGMENTS = "CANT_DIVIDE_SEGMENTS",
  CHARGING = "CHARGING",
  CLOSED_BY_CIRCUIT_NETWORK = "CLOSED_BY_CIRCUIT_NETWORK",
  DISABLED = "DISABLED",
  DISABLED_BY_CONTROL_BEHAVIOR = "DISABLED_BY_CONTROL_BEHAVIOR",
  DISABLED_BY_SCRIPT = "DISABLED_BY_SCRIPT",
  DISCHARGING = "DISCHARGING",
  FLUID_INGREDIENT_SHORTAGE = "FLUID_INGREDIENT_SHORTAGE",
  FULLY_CHARGED = "FULLY_CHARGED",
  FULL_OUTPUT = "FULL_OUTPUT",
  ITEM_INGREDIENT_SHORTAGE = "ITEM_INGREDIENT_SHORTAGE",
  LAUNCHING_ROCKET = "LAUNCHING_ROCKET",
  LOW_INPUT_FLUID = "LOW_INPUT_FLUID",
  LOW_POWER = "LOW_POWER",
  LOW_TEMPERATURE = "LOW_TEMPERATURE",
  MARKED_FOR_DECONSTRUCTION = "MARKED_FOR_DECONSTRUCTION",
  MISSING_REQUIRED_FLUID = "MISSING_REQUIRED_FLUID",
  MISSING_SCIENCE_PACKS = "MISSING_SCIENCE_PACKS",
  NETWORKS_CONNECTED = "NETWORKS_CONNECTED",
  NETWORKS_DISCONNECTED = "NETWORKS_DISCONNECTED",
  NORMAL = "NORMAL",
  NOT_CONNECTED_TO_RAIL = "NOT_CONNECTED_TO_RAIL",
  NOT_PLUGGED_IN_ELECTRIC_NETWORK = "NOT_PLUGGED_IN_ELECTRIC_NETWORK",
  NO_AMMO = "NO_AMMO",
  NO_FUEL = "NO_FUEL",
  NO_INGREDIENTS = "NO_INGREDIENTS",
  NO_INPUT_FLUID = "NO_INPUT_FLUID",
  NO_MINABLE_RESOURCES = "NO_MINABLE_RESOURCES",
  NO_MODULES_TO_TRANSMIT = "NO_MODULES_TO_TRANSMIT",
  NO_POWER = "NO_POWER",
  NO_RECIPE = "NO_RECIPE",
  NO_RESEARCH_IN_PROGRESS = "NO_RESEARCH_IN_PROGRESS",
  OPENED_BY_CIRCUIT_NETWORK = "OPENED_BY_CIRCUIT_NETWORK",
  OUT_OF_LOGISTIC_NETWORK = "OUT_OF_LOGISTIC_NETWORK",
  PREPARING_ROCKET_FOR_LAUNCH = "PREPARING_ROCKET_FOR_LAUNCH",
  RECHARGING_AFTER_POWER_OUTAGE = "RECHARGING_AFTER_POWER_OUTAGE",
  TURNED_OFF_DURING_DAYTIME = "TURNED_OFF_DURING_DAYTIME",
  WAITING_FOR_SOURCE_ITEMS = "WAITING_FOR_SOURCE_ITEMS",
  WAITING_FOR_SPACE_IN_DESTINATION = "WAITING_FOR_SPACE_IN_DESTINATION",
  WAITING_FOR_TARGET_TO_BE_BUILT = "WAITING_FOR_TARGET_TO_BE_BUILT",
  WAITING_FOR_TRAIN = "WAITING_FOR_TRAIN",
  WAITING_TO_LAUNCH_ROCKET = "WAITING_TO_LAUNCH_ROCKET",
  WORKING = "WORKING",
}

export type PrototypeKey = Int & { __PrototypeKey__: void };

export type MinedProduct =
  | MinedProduct.MinedProductFluid
  | MinedProduct.MinedProductItem;

export namespace MinedProduct {
  export enum Type {
    MinedProductFluid = "kafkatorio.resource.MinedProduct.MinedProductFluid",
    MinedProductItem = "kafkatorio.resource.MinedProduct.MinedProductItem",
  }
  
  export interface MinedProductFluid {
    type: MinedProduct.Type.MinedProductFluid;
    amount?: Double | null;
    resultProtoId: PrototypeId;
  }
  
  export interface MinedProductItem {
    type: MinedProduct.Type.MinedProductItem;
    amount?: Double | null;
    resultProtoId: PrototypeId;
  }
}