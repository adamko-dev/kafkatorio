// Generated by TypeScriptGenerator - do not edit this file manually

export interface KafkatorioPacket2 {
  modVersion: string;
  tick: Tick;
  data: KafkatorioPacketData2;
}

export type Tick = UInt;

export type KafkatorioPacketData2 =
  | KafkatorioPacketData2.ConfigurationUpdate
  | KafkatorioPacketData2.ConsoleChatUpdate
  | KafkatorioPacketData2.ConsoleCommandUpdate
  | KafkatorioPacketData2.EntityUpdate
  | KafkatorioPacketData2.MapChunkUpdate
  | KafkatorioPacketData2.PlayerUpdate
  | KafkatorioPacketData2.PrototypesUpdate
  | KafkatorioPacketData2.SurfaceUpdate;

export namespace KafkatorioPacketData2 {
  export enum Type {
    ConfigurationUpdate = "dev.adamko.kafkatorio.schema2.ConfigurationUpdate",
    ConsoleChatUpdate = "dev.adamko.kafkatorio.schema2.ConsoleChatUpdate",
    ConsoleCommandUpdate = "dev.adamko.kafkatorio.schema2.ConsoleCommandUpdate",
    PrototypesUpdate = "dev.adamko.kafkatorio.schema2.PrototypesUpdate",
    SurfaceUpdate = "dev.adamko.kafkatorio.schema2.SurfaceUpdate",
    EntityUpdate = "dev.adamko.kafkatorio.schema2.EntityUpdate",
    MapChunkUpdate = "dev.adamko.kafkatorio.schema2.MapChunkUpdate",
    PlayerUpdate = "dev.adamko.kafkatorio.schema2.PlayerUpdate",
  }
  
  export interface ConfigurationUpdate {
    type: KafkatorioPacketData2.Type.ConfigurationUpdate;
    factorioData: ConfigurationUpdateGameData;
    allMods: ConfigurationUpdateModData[];
    modStartupSettingsChange: boolean;
    migrationApplied: boolean;
  }
  
  export interface ConsoleChatUpdate {
    type: KafkatorioPacketData2.Type.ConsoleChatUpdate;
    authorPlayerIndex: PlayerIndex | null;
    content: string;
  }
  
  export interface ConsoleCommandUpdate {
    type: KafkatorioPacketData2.Type.ConsoleCommandUpdate;
    authorPlayerIndex: PlayerIndex | null;
    command: string;
    parameters: string;
  }
  
  export interface PrototypesUpdate {
    type: KafkatorioPacketData2.Type.PrototypesUpdate;
    prototypes: FactorioPrototype2[];
  }
  
  export interface SurfaceUpdate {
    type: KafkatorioPacketData2.Type.SurfaceUpdate;
    index: SurfaceIndex;
    daytime: Double;
    name: string;
  }
  
  export interface EntityUpdate {
    type: KafkatorioPacketData2.Type.EntityUpdate;
    key: EntityUpdateKey;
    eventCounts?: { [key: string]: UInt } | null;
    chunkPosition?: MapChunkPosition | null;
    graphicsVariation?: UByte | null;
    health?: Float | null;
    isActive?: boolean | null;
    isRotatable?: boolean | null;
    lastUser?: UInt | null;
    localisedDescription?: string | null;
    localisedName?: string | null;
    prototype?: PrototypeName | null;
  }
  
  export interface MapChunkUpdate {
    type: KafkatorioPacketData2.Type.MapChunkUpdate;
    key: MapChunkUpdateKey;
    eventCounts?: { [key: string]: UInt } | null;
    player?: PlayerIndex | null;
    robot?: EntityIdentifiersData | null;
    force?: ForceIndex | null;
    tileDictionary?: MapTileDictionary | null;
    isDeleted?: boolean | null;
  }
  
  export interface PlayerUpdate {
    type: KafkatorioPacketData2.Type.PlayerUpdate;
    key: PlayerUpdateKey;
    eventCounts?: { [key: string]: UInt } | null;
    characterUnitNumber?: UnitNumber | null;
    chatColour?: Colour | null;
    colour?: Colour | null;
    name?: string | null;
    afkTime?: Tick | null;
    ticksToRespawn?: Tick | null;
    forceIndex?: ForceIndex | null;
    isAdmin?: boolean | null;
    isConnected?: boolean | null;
    isShowOnMap?: boolean | null;
    isSpectator?: boolean | null;
    lastOnline?: Tick | null;
    onlineTime?: Tick | null;
    position?: MapEntityPosition | null;
    surfaceIndex?: SurfaceIndex | null;
    tag?: string | null;
    diedCause?: EntityIdentifiersData | null;
    bannedReason?: string | null;
    kickedReason?: string | null;
    disconnectReason?: string | null;
    isRemoved?: boolean | null;
  }
}

export type UInt = uint;

export interface ConfigurationUpdateGameData {
  oldVersion?: string | null;
  newVersion?: string | null;
}

export type PlayerIndex = UInt;

export type SurfaceIndex = UInt;

export type Double = double;

export interface EntityUpdateKey {
  unitNumber: UnitNumber;
  name: string;
  protoType: string;
}

export type MapChunkPosition = [
  x: Int,
  y: Int,
];

export type UByte = uint8;

export type Float = float;

export type PrototypeName = string;

export interface MapChunkUpdateKey {
  chunkPosition: MapChunkPosition;
  surfaceIndex: SurfaceIndex;
}

export interface EntityIdentifiersData {
  unitNumber?: UnitNumber | null;
  name: string;
  protoType: string;
}

export type ForceIndex = UInt;

export interface MapTileDictionary {
  tilesXY: { [key: string]: { [key: string]: PrototypeKey } };
  protos: { [key: PrototypeName]: PrototypeKey };
}

export interface PlayerUpdateKey {
  index: PlayerIndex;
}

export type UnitNumber = UInt;

export interface Colour {
  red?: Float;
  green?: Float;
  blue?: Float;
  alpha?: Float;
}

export type MapEntityPosition = [
  x: Double,
  y: Double,
];

export type Int = int;

export interface ConfigurationUpdateModData {
  modName: string;
  currentVersion?: string | null;
  previousVersion?: string | null;
}

export type FactorioPrototype2 =
  | FactorioPrototype2.MapTile;

export namespace FactorioPrototype2 {
  export enum Type {
    MapTile = "dev.adamko.kafkatorio.schema.prototypes.FactorioPrototype2.MapTile",
  }
  
  export interface MapTile {
    type: FactorioPrototype2.Type.MapTile;
    name: PrototypeName;
    layer: UInt;
    mapColour: Colour;
    collisionMasks: List;
    order: string;
    canBeMined: boolean;
  }
}

export type Byte = int8;

export type List = any;

export type PrototypeKey = Int;