{
  "name": "ckc-websocket-lua-objects",
  "connector.class": "org.apache.camel.kafkaconnector.websocket.CamelWebsocketSinkConnector",
  "topics.regex": "^Lua.*$",
  "key.converter": "org.apache.kafka.connect.storage.StringConverter",
  "value.converter": "org.apache.kafka.connect.storage.StringConverter",
  // The hostname. The default value is 0.0.0.0. Setting this option on the component will use the
  // component configured value as default.
    "camel.sink.path.host": "0.0.0.0",
//    "camel.sink.path.host": "host.docker.internal",
  // The port number. The default value is 9292. Setting this option on the component will use the
  // component configured value as default.
  "camel.sink.path.port": "9292",
  // Name of the websocket channel to use
  "camel.sink.path.resourceUri": "lua-objects",
  "camel.sink.endpoint.sendToAll": "true",
  "camel.component.websocket.host":"0.0.0.0",
  "camel.component.websocket.port": "8084",
  // Can be used to set the size in bytes that the websocket created by the websocketServlet may
  // be accept before closing. (Default is -1 - or unlimited)
  //    "camel.sink.endpoint.maxBinaryMessageSize": -1,

  // Whether the producer should be started lazy (on the first message). By starting lazy you can
  // use this to allow CamelContext and routes to startup in situations where a producer may otherwise
  // fail during starting and cause the route to fail being started. By deferring this startup to be
  // lazy then the startup failure can be handled during routing messages via Camel's routing error handlers.
  // Beware that when the first message is processed then creating and starting the producer may take a little
  // time and prolong the total processing time of the processing.
  //    "camel.sink.endpoint.lazyStartProducer": false,

  // Timeout in millis when sending to a websocket channel. The default timeout is 30000 (30 seconds).
  //    "camel.sink.endpoint.sendTimeout": 30000,

  // To send to all websocket subscribers. Can be used to configure on endpoint level, instead of
  // having to use the WebsocketConstants.SEND_TO_ALL header on the message.
  //    "camel.sink.endpoint.sendToAll": ,

  // Set the buffer size of the websocketServlet, which is also the max frame byte size (default
  // 8192)
  //    "camel.sink.endpoint.bufferSize": 8192,

  // Set the time in ms that the websocket created by the websocketServlet may be idle before
  // closing. (default is 300000)
  //    "camel.sink.endpoint.maxIdleTime": 300000,

  // Can be used to set the size in characters that the websocket created by the websocketServlet
  // may be accept before closing.
  //    "camel.sink.endpoint.maxTextMessageSize": ,

  // Can be used to set the minimum protocol version accepted for the websocketServlet.
  // (Default 13 - the RFC6455 version)
  //    "camel.sink.endpoint.minVersion": 13,

  // The CORS allowed origins. Use to allow all.
  //    "camel.sink.endpoint.allowedOrigins": ,

  // Whether to enable CORS
  //    "camel.sink.endpoint.crossOriginFilterOn": false,

  // Context path for filtering CORS
  //    "camel.sink.endpoint.filterPath": ,

  // If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX
  // support for more details.
  //    "camel.sink.endpoint.enableJmx": false,

  // To configure security using SSLContextParameters
  //    "camel.sink.endpoint.sslContextParameters": ,

  // The hostname. The default value is 0.0.0.0
  //    "camel.component.websocket.host": "0.0.0.0",

  // The port number. The default value is 9292
  //    "camel.component.websocket.port": 9292,

  // Whether the producer should be started lazy (on the first message). By starting lazy you can
  // use this to allow CamelContext and routes to startup in situations where a producer may otherwise
  // fail during starting and cause the route to fail being started. By deferring this startup to be
  // lazy then the startup failure can be handled during routing messages via Camel's routing error handlers.
  // Beware that when the first message is processed then creating and starting the producer may take a little
  // time and prolong the total processing time of the processing.
  //    "camel.component.websocket.lazyStartProducer": false,

  // Whether autowiring is enabled. This is used for automatic autowiring options (the option must
  // be marked as autowired) by looking up in the registry to find if there is a single instance
  // of matching type, which then gets configured on the component. This can be used for automatic
  // configuring JDBC data sources, JMS connection factories, AWS Clients, etc.
  //    "camel.component.websocket.autowiredEnabled": true,

  // If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX
  // support for more details.
  //    "camel.component.websocket.enableJmx": false,

  // To set a value for maximum number of threads in server thread pool. MaxThreads\/minThreads
  // or threadPool fields are required due to switch to Jetty9. The default values for maxThreads
  // is 1 2 noCores.
  //    "camel.component.websocket.maxThreads": ,

  // To set a value for minimum number of threads in server thread pool. MaxThreads\/minThreads
  // or threadPool fields are required due to switch to Jetty9. The default values for minThreads
  // is 1.
  //    "camel.component.websocket.minThreads": ,

  // This is a comma-separated list of subprotocols that are supported by the application. The list
  // is in priority order. The first subprotocol on this list that is proposed by the client is
  // the one that will be accepted. If no subprotocol on this list is proposed by the client, then the
  // websocket connection is refused. The special value 'any' means that any subprotocol is acceptable. 'any'
  // can be used on its own, or as a failsafe at the end of a list of more specific protocols. 'any' will also
  // match the case where no subprotocol is proposed by the client.
  //    "camel.component.websocket.subprotocol": "any",

  // To use a custom thread pool for the server. MaxThreads\/minThreads or threadPool fields are
  // required due to switch to Jetty9.
  //    "camel.component.websocket.threadPool": ,

  // To configure security using SSLContextParameters
  //    "camel.component.websocket.sslContextParameters": ,

  // The password for the keystore when using SSL.
  //    "camel.component.websocket.sslKeyPassword": ,

  // The path to the keystore.
  //    "camel.component.websocket.sslKeystore": ,

  // The password when using SSL.
  //    "camel.component.websocket.sslPassword": ,

  // Enable usage of global SSL context parameters.
  //    "camel.component.websocket.useGlobalSslContextParameters": false,
}
